######################################################################################
# This file is part of the Coyote <https://github.com/fpgasystems/Coyote>
# 
# MIT Licence
# Copyright (c) 2025, Systems Group, ETH Zurich
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
######################################################################################

########################################################################################################
# TOP-LEVEL CONFIGURATION
########################################################################################################
set project         "${CMAKE_PROJECT_NAME}"
set part            "${FPGA_PART}"

########################################################################################################
# SOURCE FILES & PATHS
########################################################################################################
set root_dir        "${CYT_DIR}"
set build_dir       "${CMAKE_BINARY_DIR}"
set scripts_dir     "$root_dir/scripts"
set hw_dir          "$root_dir/hw"
set ip_dir          "$root_dir/hw/ip"
set iprepo_dir      "$build_dir/iprepo" 
set dcp_dir         "$build_dir/checkpoints"
set rprt_dir        "$build_dir/reports"
set log_dir         "$build_dir/logs"
set bit_dir         "$build_dir/bitstreams"

# DEPRECATED --- ENZIAN
set enzian_dir      "$hw_dir/ext/eci/fpga"

set device_ip_dir   "$ip_dir/dev"
file mkdir $device_ip_dir

########################################################################################################
# SHELL CONFIGURATION
########################################################################################################
set cfg(fdev)                   ${FDEV_NAME}
set cfg(build_dir)              ${CMAKE_BINARY_DIR}
set cfg(static_path)            ${STATIC_PATH}
set cfg(shell_path)             ${SHELL_PATH}
set cfg(fplan_path)             ${FPLAN_PATH}
set cfg(aclk_p)                 ${ACLK_P}
set cfg(nclk_p)                 ${NCLK_P}
set cfg(uclk_p)                 ${UCLK_P}
set cfg(hclk_p)                 ${HCLK_P}
set cfg(hls_clk_u)              ${HLS_CLOCK_UNCERTAINTY}
set cfg(build_static)           ${BUILD_STATIC}
set cfg(build_shell)            ${BUILD_SHELL}
set cfg(build_app)              ${BUILD_APP}
set cfg(load_apps)              ${LOAD_APPS}
set cfg(n_xchan)                ${N_XCHAN}
set cfg(n_schan)                ${N_SCHAN}
set cfg(n_chan)                 ${N_CHAN}
set cfg(en_cred_local)          ${EN_CRED_LOCAL}
set cfg(en_cred_remote)         ${EN_CRED_REMOTE}
set cfg(n_reg)                  ${N_REGIONS}
set cfg(en_strm)                ${EN_STRM}
set cfg(en_mem)                 ${EN_MEM}
set cfg(ddr_size)               ${DDR_SIZE}
set cfg(ddr_frag)               ${DDR_FRAG}
set cfg(hbm_size)               ${HBM_SIZE}
set cfg(hbm_split)              ${HBM_SPLIT}
set cfg(n_mem_chan)             ${N_MEM_CHAN}
set cfg(n_ddr_chan)             ${N_DDR_CHAN}
set cfg(n_tcp_chan)             ${N_TCP_CHAN}
set cfg(en_dcard)               ${EN_DCARD}
set cfg(en_hcard)               ${EN_HCARD}
set cfg(en_card)                ${EN_CARD}
set cfg(en_pr)                  ${EN_PR}
set cfg(n_config)               ${N_CONFIG}
set cfg(n_outs)                 ${N_OUTSTANDING}
set cfg(en_avx)                 ${EN_AVX}
set cfg(en_wb)                  ${EN_WB}
set cfg(en_rdma)                ${EN_RDMA}
set cfg(en_tcp)                 ${EN_TCP}
set cfg(en_sniffer)             ${EN_SNIFFER}
set cfg(sniffer_vfpga_id)       ${SNIFFER_VFPGA_ID}   
set cfg(en_net_0)               ${EN_NET_0}
set cfg(en_net_1)               ${EN_NET_1}
set cfg(en_net)                 ${EN_NET}   
set cfg(qsfp)                   ${QSFP}
set cfg(pmtu)                   ${PMTU_BYTES}
set cfg(cores)                  ${COMP_CORES}
set cfg(build_opt)              ${BUILD_OPT}
set cfg(stat_probe)             ${STATIC_PROBE}
set cfg(shell_probe)            ${SHELL_PROBE}
set cfg(en_nclk)                ${EN_NCLK}
set cfg(en_uclk)                ${EN_UCLK}
set cfg(aclk_f)                 ${ACLK_F}
set cfg(nclk_f)                 ${NCLK_F}
set cfg(uclk_f)                 ${UCLK_F}
set cfg(hclk_f)                 ${HCLK_F}
set cfg(pol_inv)                ${POL_INV}
set cfg(ddr_0)                  ${DDR_0}
set cfg(ddr_1)                  ${DDR_1}
set cfg(ddr_2)                  ${DDR_2}
set cfg(ddr_3)                  ${DDR_3} 
set cfg(strm_chan)              ${STRM_CHAN}
set cfg(card_chan)              ${CARD_CHAN}
set cfg(en_xch_0)               ${EN_XCH_0}
set cfg(en_xch_1)               ${EN_XCH_1}
set cfg(tlbs_s)                 ${TLBS_S}
set cfg(tlbs_a)                 ${TLBS_A}
set cfg(tlbl_s)                 ${TLBL_S}
set cfg(tlbl_a)                 ${TLBL_A}
set cfg(tlbl_bits)              ${TLBL_BITS}
set cfg(tlbs_bits)              ${TLBS_BITS}
set cfg(n_tlb_actv)             ${N_TLB_ACTV}
set cfg(en_nru)                 ${EN_NRU}
set cfg(vit_hls)                ${VITIS_HLS}
set cfg(en_stats)               ${EN_STATS}
set cfg(net_drop)               ${NET_DROP}
set cfg(nr_st_s0)               ${NR_ST_S0}
set cfg(nr_st_s1)               ${NR_ST_S1}
set cfg(nr_sh_s0)               ${NR_SH_S0}
set cfg(nr_sh_s1)               ${NR_SH_S1}
set cfg(nr_dh_s0)               ${NR_DH_S0}
set cfg(nr_dh_s1)               ${NR_DH_S1}
set cfg(nr_dc_s0)               ${NR_DC_S0}
set cfg(nr_dc_s1)               ${NR_DC_S1}
set cfg(nr_dn_s0)               ${NR_DN_S0}
set cfg(nr_dn_s1)               ${NR_DN_S1}
set cfg(nr_n_s0)                ${NR_N_S0}
set cfg(nr_n_s1)                ${NR_N_S1}
set cfg(nr_n_s2)                ${NR_N_S2}
set cfg(nr_e_s0)                ${NR_E_S0}
set cfg(nr_e_s1)                ${NR_E_S1}
set cfg(nr_sd)                  ${NR_SD}
set cfg(nr_dd)                  ${NR_DD}
set cfg(nr_pr)                  ${NR_PR}
set cfg(nr_nst)                 ${NR_NST}
set cfg(nr_xst)                 ${NR_XST}
set cfg(eos_time)               ${EOS_TIME}
set cfg(n_wbs)                  ${N_WBS}
set cfg(n_strm_axi)             ${N_STRM_AXI}
set cfg(mult_strm_axi)          ${MULT_STRM_AXI}
set cfg(n_card_axi)             ${N_CARD_AXI}
set cfg(mult_card_axi)          ${MULT_CARD_AXI}
set cfg(n_rdma_axi)             ${N_RDMA_AXI}
set cfg(mult_rdma_axi)          ${MULT_RDMA_AXI}
set cfg(n_tcp_axi)              ${N_TCP_AXI}
set cfg(mult_tcp_axi)           ${MULT_TCP_AXI}
set cfg(n_net_chan)             ${N_NET_CHAN}
set cfg(mult_regions)           ${MULT_REGIONS}
set cfg(en_user_reg)            ${EN_USER_REG}
set cfg(en_xterm)               ${EN_XTERM}
set cfg(sim_clock_period)       ${SIM_CLOCK_PERIOD}
set cfg(data_dest_bits)         ${DATA_DEST_BITS}
set cfg(vaddr_bits)             ${VADDR_BITS}

########################################################################################################
# UTIL
########################################################################################################
proc color {fore text} {
    upvar #0 cfg cnfg
    if {$cnfg(en_xterm) eq 1} {
        return [exec tput bold][exec tput setaf $fore]$text[exec tput sgr0]
    } else {
        return $text
    }
}

set clr_flow 6
set clr_cmplt 214
set clr_error 9
set clr_rest 3

########################################################################################################
# CHECK IP REPO EXISTS
########################################################################################################
# Check iprepo
if { [file isdirectory $iprepo_dir] } {
	set lib_dir "$iprepo_dir"
} else {
	puts "[color $clr_error "iprepo directory could not be found."]"
}
