######################################################################################
# This file is part of the Coyote <https://github.com/fpgasystems/Coyote>
# 
# MIT Licence
# Copyright (c) 2025, Systems Group, ETH Zurich
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
######################################################################################

# @brief Creates a Vivado project for each region and config
# Additionally, it packages user kernels as IPs that can be used later during the synthesis

if {[catch {
    
########################################################################################################

# Config & env
unset ::env(PYTHONPATH)
unset ::env(PYTHONHOME)

source "${CMAKE_BINARY_DIR}/base.tcl"

puts "[color $clr_flow "** Creating user projects ..."]"
puts "[color $clr_flow "**"]"

# Iterate through all the applications
${APPS_ALL}

for {set i 0}  {$i < $cfg(n_config)} {incr i} {
    for {set j 0}  {$j < $cfg(n_reg)} {incr j} {
        ########################################################################################################
        # CREATE PROJECT
        ########################################################################################################
        set proj_dir "$build_dir/$project\_config_$i/user\_c$i\_$j"

        create_project $project $proj_dir -part $part -force
        set proj [current_project]
        set_property IP_REPO_PATHS $lib_dir [current_fileset]
        update_ip_catalog

        file mkdir "$dcp_dir/config_$i"
        file mkdir "$rprt_dir/config_$i"
        file mkdir "$log_dir/config_$i"

        ########################################################################################################
        # SET PROJECT PROPERTIES
        ########################################################################################################
        #set_property "board_part" $board_part                      $proj
        set_property "default_lib" "xil_defaultlib"                 $proj
        set_property "ip_cache_permissions" "read write"            $proj
        set_property "ip_output_repo" "$proj_dir/$project.cache/ip" $proj
        set_property "sim.ip.auto_export_scripts" "1"               $proj
        set_property "target_language" "Verilog"                    $proj
        set_property "simulator_language" "Mixed"                   $proj
        set_property "xpm_libraries" "XPM_CDC XPM_MEMORY"           $proj

        ########################################################################################################
        # CREATE & ADD FILES
        ########################################################################################################
        file mkdir "$proj_dir/hdl"
        file mkdir "$proj_dir/hdl/ext"
        file mkdir "$proj_dir/hdl/wrappers"
        file mkdir "$proj_dir/xdc"

        # Call write HDL scripts
        proc call_write_hdl {r_path op c_cnfg c_reg} {
            set output [exec /usr/bin/python3 "$r_path/write_hdl.py" $op $c_cnfg $c_reg]
            puts $output
        }
        call_write_hdl $build_dir 2 $i $j

        # Add source files
        add_files "$hw_dir/hdl/shell/user_lback.svh"
        add_files "$hw_dir/hdl/pkg"
        add_files "$hw_dir/hdl/user"
        add_files "$hw_dir/hdl/common"
        add_files "$proj_dir/hdl"

        # Top level
        set_property "top" design_user_wrapper_$j [current_fileset]

        # Constraints
        add_files -norecurse -fileset [get_filesets constrs_1] "$proj_dir/xdc"
        set_property used_in_implementation false [get_files -of_objects [get_filesets constrs_1]]
        #set_property -name {STEPS.SYNTH_DESIGN.ARGS.MORE OPTIONS} -value {-mode out_of_context} -objects [get_runs synth_1]

        # Create a project-local constraint file to take debugging constraints that we don't want to propagate to the repository.
        file mkdir "$proj_dir/$project.srcs/constrs_1"
        close [ open "$proj_dir/$project.srcs/constrs_1/local.xdc" w ]

        set_property target_constrs_file "$proj_dir/$project.srcs/constrs_1/local.xdc" [current_fileset -constrset]

        ########################################################################################################
        # USER INFRASTRUCTURE
        ########################################################################################################
        source "$scripts_dir/ip_inst/user_infrastructure.tcl" -notrace
        source "$scripts_dir/ip_inst/common_infrastructure.tcl" -notrace

        ########################################################################################################
        # ADD USER-DEFINED LOGIC
        ########################################################################################################
        if {$cfg(load_apps) eq 1} {
            set tmp_val "[format "\$vfpga_c$i\_$j"]" 
            set tmp_path "[format "%s" $tmp_val]"
            set cmd "[format "set tmp_path $tmp_path"]"
            eval $cmd

            # Add all raw HDL files (no packaging)
            file mkdir "$proj_dir/hdl/ext/raw"
            set files_hdl [glob -nocomplain "$hw_dir/hdl/pkg/axi_macros.svh" "$hw_dir/hdl/pkg/axi_intf.sv" "$hw_dir/hdl/pkg/lynx_macros.svh" "$hw_dir/hdl/pkg/lynx_intf.sv"]
            file copy -force {*}$files_hdl "$proj_dir/hdl/ext/raw"

            if {[file isdirectory "${CMAKE_SOURCE_DIR}/$tmp_path/hdl"]} {
                set files_hdl [glob -nocomplain "${CMAKE_SOURCE_DIR}/$tmp_path/hdl/*"]
                if {[llength $files_hdl]} {
                    file copy -force {*}$files_hdl "$proj_dir/hdl/ext/raw"
                }
            }
            add_files "$proj_dir/hdl/ext/raw"

            # Add all HLS IPs (compiled using hls/comp_hls.tcl)
            if {[file isdirectory "${CMAKE_SOURCE_DIR}/$tmp_path/hls"]} {
                set krnls [glob -nocomplain -tails -directory "${CMAKE_SOURCE_DIR}/$tmp_path/hls" -type d *]
                foreach krnl $krnls {
                    create_ip -name "$krnl\_hls_ip" -vendor user.org -library hls -version 1.0 -module_name "$krnl\_hls_ip"
                    update_compile_order -fileset sources_1
                }
            }

            # Include vFPGA top
            set files_hdl [glob -nocomplain "${CMAKE_SOURCE_DIR}/$tmp_path/vfpga_top.svh"]
            if {[llength $files_hdl]} {
                file copy -force {*}$files_hdl "$proj_dir/hdl/vfpga_top.svh"
            }
            add_files -norecurse "$proj_dir/hdl/vfpga_top.svh"

            # IP instantiation
            if {[file exists "${CMAKE_SOURCE_DIR}/$tmp_path/init_ip.tcl"]} {
                source "${CMAKE_SOURCE_DIR}/$tmp_path/init_ip.tcl"
            }
        }

        ########################################################################################################
        # USER PROJECT CREATED
        ########################################################################################################
        close_project
        puts "[color $clr_flow "** vFPGA_C$i\_$j project created"]"
        puts "[color $clr_flow "**"]"
    }
}

puts "[color $clr_flow "** User projects created"]"
puts "[color $clr_flow "**"]"

########################################################################################################

} errorstring]} {
    puts "[color $clr_error "** CERR: $errorstring"]"
    puts "[color $clr_error "**"]"
    exit 1
}

exit 0