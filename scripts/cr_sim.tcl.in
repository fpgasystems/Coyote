if {[catch {

########################################################################################################

source "${CMAKE_BINARY_DIR}/base.tcl"

# All occurences of ${CMAKE_SOURCE_DIR}/$vfpga_c0_0 are hardcoded for the use of vFPGA configuration 0 region 0
${APPS_ALL}

########################################################################################################
# Project
########################################################################################################
file mkdir "$build_dir/sim"
set sim_dir       "$root_dir/sim"
set sim_build_dir "$build_dir/sim"
set proj_dir      "$root_dir/.."
puts $sim_build_dir

# Create project
create_project $project $sim_build_dir -part $part -force
set proj [current_project]
set_property IP_REPO_PATHS $lib_dir [current_fileset]
update_ip_catalog

puts "**** Sim created"
puts "****"

########################################################################################################
# Set project properties
########################################################################################################
#set_property "board_part" $board_part                      $proj
set_property "default_lib" "xil_defaultlib"                 $proj
set_property "ip_cache_permissions" "read write"            $proj
set_property "ip_output_repo" "$sim_build_dir/$project.cache/ip"  $proj
set_property "sim.ip.auto_export_scripts" "1"               $proj
set_property "target_language" "Verilog"                    $proj
set_property "simulator_language" "Mixed"                   $proj
set_property "xpm_libraries" "XPM_CDC XPM_MEMORY"           $proj
if {$cfg(en_pr) eq 1} {
    set_property "pr_flow" "1"                              $proj
}

puts "**** Sim properties set"
puts "****"

########################################################################################################
# Create and add source files
########################################################################################################

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Call write HDL scripts
unset ::env(PYTHONPATH)
unset ::env(PYTHONHOME)
proc call_write_hdl {r_path op c_cnfg c_reg} {
    set output [exec /usr/bin/python3 "$r_path/write_hdl.py" $op $c_cnfg $c_cnfg]
    puts $output
}
call_write_hdl "$build_dir" 3 0 0

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "$sim_dir/hw"] \
 [file normalize "$hw_dir/hdl/pkg"] \
 [file normalize "$hw_dir/hdl/common"] \
 [file normalize "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/vfpga_top.svh"] \
 [file normalize "$build_dir/$project\_config_0/user_c0_0/hdl/lynx_pkg.sv"] \
 [file normalize "$build_dir/$project\_config_0/user_c0_0/hdl/wrappers/user_logic_c0_0.sv"] \
]
add_files -fileset $obj $files
if {[file exists "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/hdl"]} {
    add_files -fileset $obj [file normalize "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/hdl"]
}

# Grab all hls kernels
if {[file isdirectory "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/hls"]} {
    set krnls [glob -nocomplain -tails -directory "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/hls" -type d *]

    foreach krnl $krnls {
        create_ip -name "$krnl\_c0_0" -vendor user.org -library hls -version 1.0 -module_name "$krnl\_c0_0"
        update_compile_order -fileset sources_1
    }
}

set_property top tb_user [current_fileset]
set_property top tb_user [get_filesets sim_1]
set_property top_lib xil_defaultlib [get_filesets sim_1]
# Set the library to link for the simulation
set xelab_options "-sv_root $sim_build_dir -sv_lib ${SIM_DPI_LIB_NAME}"
set_property -name {XELAB.MORE_OPTIONS} -value $xelab_options -object [get_filesets sim_1]

# User infrastructure
source "$scripts_dir/ip_inst/common_infrastructure.tcl" -notrace

puts "**** Sim sources set"
puts "****"

# IP instantiation
if {[file exists "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/init_ip.tcl"]} {
    source "${CMAKE_SOURCE_DIR}/$vfpga_c0_0/init_ip.tcl"
}

########################################################################################################
# CUSTOM SCRIPTS
########################################################################################################
if {$cfg(sim_path) != "0"} {
    source "${SIM_SCR_PATH}" -notrace

    puts "**** Custom sim script"
    puts "****"
}

########################################################################################################

} errorstring]} {
    puts "**** CERR: $errorstring"
    puts "****"
    exit 1
}

exit 0
